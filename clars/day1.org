* day1
- My [[../codes/day1/src/main.rs][Rust code]]
- [[https://adventofcode.com/2020/day/1][Link to the problem]]
** Par One
*** Problem
This problem asks me to find two numbers in ~input~ that sum up to 2020.
*** Solution
It is easy to solve this problem naively. Just iterate through the sequence of numbers twice. This solution, however, has \(O(N^2)\). In order to make it more efficient I can use hashmap.

First, I store ~2020 - number~ as key and the index of the number as value by iterating through the sequence. Second, check if a number in the sequence is in the key and the index of the number and the value-index is not the same. This operations is seeing if the two numbers are different and sum up to 2020.

Each of these operations takes \(O(N)\), so the total time is \(O(N)\).
*** Answer
I've got the answer, ~1007331~.
** Part Two
*** Problem
This problem is just an extended version of Part One.
*** Solution
The idea is the same as the first one. The different thing is that I deal with three numbers.

The first step is the same. I store ~2020 - number~ as key and the index of the number as value.

In the second step, I iterate through the sequence twice, and the compare thorse sum with the store key and those indexes with the stored value. If you get the same sum and the different indexes, it is the answer of this question.

The order of this solution is \(O(N^2)\). The first step is \(O(N)\) and the second step is \(O(N^2)\), so in total \(O(N^2)\).
*** Answer
I've got the answer, ~48914340~.
